## Sources.
source "%val{config}/plugins/kakoune-buffers/buffers.kak"
source "%val{config}/plugins/kakoune-cd/cd.kak"
source "%val{config}/plugins/kakoune-find/find.kak"
source "%val{config}/plugins/kakoune-phantom-selection/phantom-selection.kak"
source "%val{config}/plugins/kakoune-mark/mark.kak"
source "%val{config}/plugins/kakoune-filetree/filetree.kak"
source "%val{config}/plugins/fzf.kak/rc/fzf.kak"
source "%val{config}/plugins/kakoune-edit-or-dir/rc/edit-or-dir.kak"
# source "%val{config}/plugins/auto-pairs.kak/rc/auto-pairs.kak"
# source "%val{config}/plugins/kakoune-marks/marks.kak"
# source "%val{config}/plugins/kakoune-easymotion/easymotion.kak"
# source "%val{config}/plugins/kakoune-registers/registers.kak"
# source "%val{config}/plugins/volatile-highlighting.kak/rc/volatile-highlighting.kak"

source "%val{config}/scripts/bc.kak"
source "%val{config}/scripts/colorscheme-browser.kak"
# source "%val{config}/scripts/fzf.kak"

## General settings.
# set global ui_options ncurses_assistant=off
set global ui_options ncurses_status_on_top=true ncurses_assistant=off
set global tabstop 4
set global indentwidth 4
# keep space around cursor
set global scrolloff 10,10
# set global grepcmd 'rg --column'
set global grepcmd 'rg --column --with-filename'

colorscheme github-custom

# enable kak-lsp
eval %sh{kak-lsp --kakoune -s $kak_session}
# nop %sh{ (kak-lsp -s $kak_session -vvv ) > /tmp/kak-lsp.log 2>&1 < /dev/null & }
map global user a ': enter-user-mode lsp<ret>' -docstring 'lsp mode'

# hook global WinCreate ^[^*]+$ %{
hook global WinCreate .* %{
    addhl window/wrap wrap
    addhl window/number-lines number-lines -hlcursor
    # addhl window/show-whitespaces show-whitespaces -tab '›' -tabpad '⋅' -lf ' ' -spc ' ' -nbsp '⍽'
    addhl window/show-whitespaces show-whitespaces -tab '›' -tabpad '⋅' -spc ' ' -nbsp '⍽'
    addhl window/show-matching show-matching
    addhl window/VisibleWords regex \b(?:FIXME|TODO|XXX)\b 0:default+rb

    # smarttab-enable
    tab-completion-enable
    show-trailing-whitespace-enable; face window TrailingWhitespace default,red
    search-highlighting-enable; face window Search default,rgb:EDF97D+bi
}

hook global WinDisplay .* info-buffers

## File types.
def filetype-hook -params 2 %{ hook global WinSetOption "filetype=(%arg{1})" %arg{2} }

filetype-hook man %{
    rmhl window/number-lines
    set window scrolloff 1000,0
}

declare-user-mode help-and-hovers
map global help-and-hovers m ': mark-word<ret>' -docstring 'mark word'
map global help-and-hovers c ': mark-clear<ret>' -docstring 'mark clear'
map global help-and-hovers p ': print-working-directory<ret>' -docstring 'print working dir'
map global user h ': enter-user-mode help-and-hovers<ret>' -docstring 'help and hovers'

#spell
map global help-and-hovers s ': spell-replace<ret>' -docstring 'spell replace'
declare-option str language en-GB
filetype-hook latex|markdown|git-commit %{
    hook window BufWritePost .* %{
        spell %opt{language}
    }
}

filetype-hook go %{
    set window matching_pairs '(' ')' '{' '}' '[' ']'
    set window indentwidth 0
    set buffer formatcmd goreturns
    hook buffer BufWritePre .*\.go %{ format }
    # hook window BufWritePost .*\.go %{ format }
    # alias window format go-format-use-goimports
    alias window jump-to-definition go-jump
    # set buffer lintcmd '(gometalinter | grep -v "::\w")  <'
    map global goto u '<esc>: go-jump<ret>' -docstring 'go-jump'
    map global help-and-hovers d ': go-doc-info<ret>' -docstring 'go-doc-info'
    # map global help-and-hovers h ': lsp-hover<ret>' -docstring 'lsp-hover'
    # map global help-and-hovers i ': lsp-signature-help<ret>' -docstring 'lsp-signature-help'
    # map global help-and-hovers r ': lsp-highlight-references<ret>' -docstring 'lsp-highlight-references'
    # map global goto d '<esc>: enter-user-mode gotodef<ret>' -docstring 'gotodef mode'
    unmap global lsp &
    map global lsp <*> ': lsp-highlight-references<ret>' -docstring 'lsp-highlight-references'
    # set window lsp_auto_highlight_references true
    lsp-auto-signature-help-enable
    # go-enable-autocomplete
}

filetype-hook c|cpp %{
    clang-enable-autocomplete; clang-enable-diagnostics
    alias window lint clang-parse
    alias window lint-next-error clang-diagnostics-next
    map window object ';' '/\*,\*/<ret>'
}

filetype-hook rust %{
    set buffer formatcmd rustfmt
}

# filetype-hook markdown %{
#     set window static_words %sh{tr '\n' ':' < /usr/share/dict/words}
# }

filetype-hook json|js %{
    # set buffer formatcmd 'jq .'
    set buffer formatcmd 'js-beautify -a -j -B --good-stuff'
}

# Highlight any files whose names start with "zsh" as sh
hook global BufCreate (.*/)?\.?zsh.* %{
    set-option buffer filetype sh
}

# Highlight files ending in .conf as ini
# (Will probably be close enough)
hook global BufCreate .*\.conf %{
    set-option buffer filetype ini
}

# escape hatch
# https://github.com/mawww/kakoune/wiki/Avoid-the-escape-key
hook global InsertChar \. %{ try %{
    exec -draft hH <a-k>,\.<ret> d
    exec <esc>
    #write
}}

## Maps.
unalias global e edit
alias global e edit-or-dir
alias global u enter-user-mode
# space is my leader
map global normal <space> ,
map global user <space> <space> -docstring 'remove selections except main'

map global goto ';' '.' -docstring 'last buffer change'
map global goto '.' '<esc>: change-directory-current-buffer<ret>' -docstring 'current buffer dir'
map global goto p '<esc>: cd ..;print-working-directory<ret>' -docstring 'parent dir'
map global goto <plus>  '<esc>: switch-to-modified-buffer<ret>' -docstring 'switch to [+] buffer'

map global normal <'> <">
# map global normal <"> <'>
map global normal <0>   ': zero "select-word-better"<ret>'
map global normal <a-0> ': select-WORD-better<ret>'
define-command -hidden -params 1 zero %{
   evaluate-commands %sh{
        if [ $kak_count = 0 ]; then
            echo "$1"
        else
            echo "exec ${kak_count}0"
        fi
    }
}

map global normal <,> ': enter-user-mode buffers<ret>'
map global normal <a-,> ': enter-user-mode -lock buffers<ret>'
map global normal <%> '<c-s>%' # Save position before %
# map global normal <x> <a-x>
# map global normal <a-x> <a-X>

map global normal <minus> ': shrink-selection<ret>'
map global normal <plus> ': enlarge-selection<ret>'

# map global normal <c-o> '<c-o>vv'
# map global normal <c-i> '<c-i>vv'

map global user e ': filetree<ret>' -docstring 'filetree'

# fzf.kak
# set-option global fzf_file_command 'fd --type f --follow'
set-option global fzf_preview true
# set-option global fzf_highlighter 'bat'
set-option global fzf_file_command 'fd'
set-option global fzf_cd_command 'blsd'
# set-option global fzf_tmux_height 24
map global user p ': fzf-mode<ret>' -docstring 'fzf-mode'

# map global normal <ret> :w<ret>
map global normal <F2> ': w<ret>' -docstring 'save'

# https://github.com/mawww/kakoune/issues/1791
map global object q Q -docstring 'double quote string'
map global object Q q -docstring 'single quote string'
map global view u t -docstring 'same as t'

# vim old habits
map global normal D '<a-l>d' -docstring 'delete to end of line'
map global normal Y '<a-l>y' -docstring 'yank to end of line'
map global normal = :format<ret> -docstring 'format buffer'

map global normal '#' :comment-line<ret> -docstring 'comment line'
map global normal '<a-#>' :comment-block<ret> -docstring 'comment block'

# Insert mode
#map global insert <c-s> <c-o>    ; # silent: stop completion
#map global insert <c-c> <c-x>    ; # complete here
#map global insert <c-k> <c-v>    ; # raw insert, use vim binding
#map global insert <c-c> <a-\;>   ; # execute one normal kak command
#map global insert <c-y> '<c-r>"' ; # paste from normal yank register, readline key
map global insert <c-y> '<a-;>!pbpaste<ret>'
# map global sysclipboard y '<a-|>pbcopy<ret>; :echo "copied selection to system clipboard"<ret>' -docstring 'yank'
# map global sysclipboard p '!pbpaste<ret>' -docstring 'paste'

# user maps
map global user S '*%s<c-/><ret>' -docstring 'select all'
map global user R ':e!<ret>' -docstring 'Reload buffer'

declare-user-mode phantom
map global phantom <plus>     ': phantom-sel-add-selection<ret>' -docstring 'phantom-sel add'
map global phantom <minus>    ': phantom-sel-select-all; phantom-sel-clear<ret>' -docstring 'phantom-sel clear all'
map global phantom <)>        ': phantom-sel-iterate-next<ret>' -docstring 'phantom-sel n'
map global phantom <(>        ': phantom-sel-iterate-prev<ret>' -docstring 'phantom-sel p'
map global normal <c-g>       ': enter-user-mode phantom<ret>'

# declare-user-mode sysclipboard
# map global sysclipboard i ': clipboard-import<ret>' -docstring 'import'
# map global sysclipboard e ': clipboard-export<ret>' -docstring 'export'
# map global user * ': enter-user-mode sysclipboard<ret>' -docstring 'sysclipboard mode'

map global user <lt> ': clipboard-import<ret>' -docstring 'sysclipboard import'
map global user <gt> ': clipboard-export<ret>' -docstring 'sysclipboard export'

## Defs.
# https://github.com/alyssais/dotfiles/blob/master/.config/kak/kakrc#L30-L38
define-command -docstring "import from the system clipboard" clipboard-import %{
  set-register dquote %sh{pbpaste}
  echo -markup "{Information}imported system clipboard to register """
}

define-command -docstring "export to the system clipboard" clipboard-export %{
  nop %sh{ printf "%s" "$kak_main_reg_dquote" | pbcopy }
  echo -markup "{Information}exported register "" to system clipboard"
}

# Sort of a replacement for gq.
# def format-text %{ exec '|fmt<ret>' }
# map global user q '|fmt -w 80<ret>: echo -markup {green}[sel] | fmt -w 80<ret>' -docstring 'format'
def format-text %{ exec '|par -w%opt{autowrap_column}<a-!><ret>' }

def -hidden slice-by-camel %{
  exec s[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}
# <a-_> merge contiguous selections together (works across lines as well)
map global normal <a-minus> ': slice-by-camel<ret>'

def enlarge-selection %{
  exec '<a-:>L<a-;>H<a-:>'
}
def shrink-selection %{
  exec '<a-:>H<a-;>L<a-:>'
}
def selection-length %{
    eval %sh{ echo "echo ${#kak_selection}" }
}
# def selection-length %{echo %sh{echo ${#kak_selection} }}

def del-trailing-whitespace %{
  try %{
    eval -draft %{
      exec '%s\h+$<ret><a-d>'
      eval -client %val{client} echo -- \
        %sh{ echo "deleted trailing whitespace on $(echo "$kak_selections_desc" | wc -w) lines" }
    }
  } catch %{
    echo 'no trailing whitespace'
  }
}

def select-word-better %{
  # Note: \w doesn't use extra_word_chars.
  eval -itersel %{
    try %{ exec '<a-i>w' } catch %{ exec '<a-l>s\w<ret>) <a-i>w' } catch %{}
  }
  exec '<a-k>\w<ret>'
}
def select-WORD-better %{
  eval -itersel %{
    try %{ exec '<a-i><a-w>' } catch %{ exec '<a-l>s\S<ret>) <a-i><a-w>' } catch %{}
  }
  exec '<a-k>\S<ret>'
}

def switch-to-modified-buffer %{
  eval -save-regs a %{
    reg a ''
    try %{
      eval -buffer * %{
        eval %sh{[ "$kak_modified" = true ] && echo "reg a %{$kak_bufname}; fail"}
      }
    }
    eval %sh{[ -z "$kak_main_reg_a" ] && echo "fail 'No modified buffers!'"}
    buffer %reg{a}
  }
}

def -docstring %{switch to the other client's buffer} \
  other-client-buffer \
  %{ eval %sh{
  if [ "$(echo "$kak_client_list" | wc -w)" -ne 2 ]; then
    echo "fail 'only works with two clients'"
    exit
  fi
  set -- $kak_client_list
  other_client="$1"
  [ "$other_client" = "$kak_client" ] && other_client="$2"
  echo "eval -client '$other_client' 'eval -client ''$kak_client'' \"buffer ''%val{bufname}''\"'"
}}

## More:
# Git extras.
def git-show-blamed-commit %{
  git show %sh{git blame -L "$kak_cursor_line,$kak_cursor_line" "$kak_buffile" | awk '{print $1}'}
}
def git-log-lines %{
  git log -L %sh{
    anchor="${kak_selection_desc%,*}"
    anchor_line="${anchor%.*}"
    echo "$anchor_line,$kak_cursor_line:$kak_buffile"
  }
}
def git-toggle-blame %{
  try %{
    addhl window/git-blame group
    rmhl window/git-blame
    git blame
  } catch %{
    git hide-blame
  }
}
def git-hide-diff %{ rmhl window/git-diff }

declare-user-mode git
map global git b  ': git-toggle-blame<ret>'       -docstring 'blame (toggle)'
map global git l  ': git log<ret>'                -docstring 'log'
map global git c  ': git commit<ret>'             -docstring 'commit'
map global git d  ': git diff<ret>'               -docstring 'diff'
map global git s  ': git status<ret>'             -docstring 'status'
map global git h  ': git show-diff<ret>'          -docstring 'show diff'
map global git H  ': git-hide-diff<ret>'          -docstring 'hide diff'
map global git w  ': git-show-blamed-commit<ret>' -docstring 'show blamed commit'
map global git L  ': git-log-lines<ret>'          -docstring 'log blame'
map global user g ': enter-user-mode git<ret>'    -docstring 'git mode'


# smarttab.kak?
# Emulate expandtab smarttab, kind of.
# Due to #2122 this can only be done as a hook, not a map.
def smarttab-enable %{
  hook -group smarttab window InsertChar \t %{ exec -draft -itersel "h%opt{indentwidth}@" }
  hook -group smarttab window InsertDelete ' ' %{
    eval -draft -itersel %{ try %{
      exec 'hGh' "s\A((.{%opt{indentwidth}})*[^ ]*) *\z<ret>" '"1R'
    }}
  }
}
def smarttab-disable %{ rmhooks window smarttab }


# Highlight trailing whitespace in normal mode, with the TrailingWhitespace face.
# What I really want is to only not highlight trailing whitespace as I'm
# inserting it, but that doesn't seem possible right now.
def show-trailing-whitespace-enable %{
  addhl window/TrailingWhitespace regex \h+$ 0:TrailingWhitespaceActive
  face window TrailingWhitespaceActive TrailingWhitespace
  hook -group trailing-whitespace window ModeChange 'normal:insert' \
    %{ face window TrailingWhitespaceActive '' }
  hook -group trailing-whitespace window ModeChange 'insert:normal' \
    %{ face window TrailingWhitespaceActive TrailingWhitespace }
}
def show-trailing-whitespace-disable %{
  rmhl window/TrailingWhitespace
  rmhooks window trailing-whitespace
}
face global TrailingWhitespace ''


# Tab completion.
def tab-completion-enable %{
  hook -group tab-completion window InsertCompletionShow .* %{
    try %{
      exec -draft 'h<a-K>\s<ret>'
      map window insert <tab> <c-n>
      map window insert <s-tab> <c-p>
    }
  }
  hook -group tab-completion window InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
  }
}
def tab-completion-disable %{ rmhooks window tab-completion }

# Basic autoindent.
def -hidden basic-autoindent-on-newline %{
  eval -draft -itersel %{
    try %{ exec -draft ';K<a-&>' }                      # copy indentation from previous line
    try %{ exec -draft ';k<a-x><a-k>^\h+$<ret>H<a-d>' } # remove whitespace from autoindent on previous line
  }
}
def basic-autoindent-enable %{
  hook -group basic-autoindent window InsertChar '\n' basic-autoindent-on-newline
  hook -group basic-autoindent window WinSetOption 'filetype=.*' basic-autoindent-disable
}
def basic-autoindent-disable %{ rmhooks window basic-autoindent }


# search-highlighting.kak, simplified
def search-highlighting-enable %{
  hook window -group search-highlighting NormalKey [/?*nN]|<a-[/?*nN]> %{ try %{
    addhl window/SearchHighlighting dynregex '%reg{/}' 0:Search
  }}
  hook window -group search-highlighting NormalKey <esc> %{ rmhl window/SearchHighlighting }
}
def search-highlighting-disable %{
  rmhl window/SearchHighlighting
  rmhooks window search-highlighting
}

# by lenormf, see https://github.com/mawww/kakoune/issues/1192
# decl -hidden range-specs show_matching_range
#
# hook global -group kakrc InsertChar [[(<{}>)\]] %{ eval -draft %{
#     try %{
#         exec -no-hooks <esc>\;hm<a-k>..<ret>\;
#         set window show_matching_range "%val{timestamp}:%val{selection_desc}|MatchingChar"
#     }
#
#     hook window -group once-matching InsertChar [^[(<{}>)\]] %{
#         set window show_matching_range ""
#         remove-hooks window once-matching
#     }
#
#     hook window -group once-matching InsertEnd .* %{
#         set window show_matching_range ""
#         remove-hooks window once-matching
#     }
# } }
#
# hook global -group kakrc InsertEnd .* %{
#     set buffer show_matching_range ""
# }
#
# hook global -group kakrc WinCreate .* %{
#     addhl window ranges show_matching_range
# }

## Sources.
source "%val{config}/plugins/plug.kak/rc/plug.kak"

## Plugins
plug "andreyorst/plug.kak" noload

plug "delapouite/kakoune-buffers" config %{
    hook global WinDisplay .* info-buffers
    map global user b ': enter-user-mode buffers<ret>' -docstring 'buffers'
    map global user <a-b> ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
}

plug "delapouite/kakoune-cd" config %{
    map global goto '.' '<esc>: change-directory-current-buffer<ret>' -docstring 'current buffer dir'
    map global goto p '<esc>: cd ..;print-working-directory<ret>' -docstring 'parent dir'
}

plug "andreyorst/fzf.kak" config %{
    map global user p ': fzf-mode<ret>' -docstring 'fzf-mode'
    # set-option global fzf_preview true
    # set-option global fzf_file_command 'fd --type f --follow'
    # set-option global fzf_highlighter 'bat'
    # set-option global fzf_cd_command 'blsd'
    # set-option global fzf_tmux_height 24
    # set-option global fzf_preview_width '65%'
    evaluate-commands %sh{
        if [ ! -z "$(command -v fd)" ]; then
            echo "set-option global fzf_file_command 'fd . --no-ignore --type f --follow'"
        fi
    }
}

plug "TeddyDD/kakoune-edit-or-dir" config %{
    unalias global e edit
    alias global e edit-or-dir
}

plug "occivink/kakoune-phantom-selection" config %{
    declare-user-mode phantom
    map global phantom <plus>     ': phantom-sel-add-selection<ret>' -docstring 'phantom-sel add'
    map global phantom <minus>    ': phantom-sel-select-all; phantom-sel-clear<ret>' -docstring 'phantom-sel clear all'
    map global phantom <)>        ': phantom-sel-iterate-next<ret>' -docstring 'phantom-sel n'
    map global phantom <(>        ': phantom-sel-iterate-prev<ret>' -docstring 'phantom-sel p'
    map global normal <plus>      ': enter-user-mode phantom<ret>'
    map global normal <a-plus>    ': enter-user-mode -lock phantom<ret>'

    # # replace select-onto with phantom-sel stuff; more useful
    # map global normal f     ': phantom-sel-add-selection<ret>'
    # map global normal F     ': phantom-sel-select-all; phantom-sel-clear<ret>'
    # map global normal <a-f> ': phantom-sel-iterate-next<ret>'
    # map global normal <a-F> ': phantom-sel-iterate-prev<ret>'
    # map global insert <a-f> '<esc>: phantom-sel-iterate-next<ret>i'
    # map global insert <a-F> '<esc>: phantom-sel-iterate-prev<ret>i'
}

plug "alexherbo2/auto-pairs.kak" config %{
    # set global auto_pairs '(' ')' '{' '}' '[' ']' '"' '"' '''' '''' '`' '`'
    hook global WinCreate .* %{
        auto-pairs-enable
    }
}

plug "alexherbo2/distraction-free.kak" config %{
    alias global dd distraction-free-toggle
}

plug "occivink/kakoune-filetree" config %{
    map global normal <minus> ': change-directory-current-buffer;filetree<ret>' -docstring 'filetree in current buf dir'
    # map global normal <minus> ': filetree<ret>' -docstring 'filetree'
}

plug "ul/kak-tree" config %{
    # set global tree_cmd 'kak-tree -c /Users/vbauer/dotfiles/config/kak/kak-tree.toml'

    declare-user-mode syntax-tree-children
    map global syntax-tree-children c ': tree-select-children<ret>' -docstring 'children'
    map global syntax-tree-children t ': tree-select-children type_declaration<ret>' -docstring 'type_declaration'
    map global syntax-tree-children m ': tree-select-children method_declaration<ret>' -docstring 'method_declaration'
    map global syntax-tree-children f ': tree-select-children function_declaration<ret>' -docstring 'function_declaration'
    map global syntax-tree-children l ': tree-select-children func_literal<ret>' -docstring 'func_literal'
    map global syntax-tree-children g ': tree-select-children go_statement<ret>' -docstring 'go_statement'
    map global syntax-tree-children b ': tree-select-children block<ret>' -docstring 'block'
    map global syntax-tree-children i ': tree-select-children if_statement<ret>' -docstring 'if_statement'
    map global syntax-tree-children o ': tree-select-children for_statement<ret>' -docstring 'for_statement'
    map global syntax-tree-children u ': tree-select-children parameter_list<ret>' -docstring 'parameter_list'
    map global syntax-tree-children r ': tree-select-children return_statement<ret>' -docstring 'return_statement'
    map global syntax-tree-children <backspace> ': enter-user-mode syntax-tree<ret>' -docstring 'back...'

    declare-user-mode syntax-tree-parent
    map global syntax-tree-parent p ': tree-select-parent-node<ret>' -docstring 'parent_node'
    map global syntax-tree-parent t ': tree-select-parent-node type_declaration<ret>' -docstring 'type_declaration'
    map global syntax-tree-parent m ': tree-select-parent-node method_declaration<ret>' -docstring 'method_declaration'
    map global syntax-tree-parent f ': tree-select-parent-node function_declaration<ret>' -docstring 'function_declaration'
    map global syntax-tree-parent l ': tree-select-parent-node func_literal<ret>' -docstring 'func_literal'
    map global syntax-tree-parent b ': tree-select-parent-node block<ret>' -docstring 'block'
    map global syntax-tree-parent u ': tree-select-parent-node parameter_list<ret>' -docstring 'parameter_list'
    map global syntax-tree-parent r ': tree-select-parent-node return_statement<ret>' -docstring 'return_statement'
    map global syntax-tree-parent <backspace> ': enter-user-mode syntax-tree<ret>' -docstring 'back...'

    declare-user-mode syntax-tree-next
    map global syntax-tree-next ')' ': tree-select-next-node<ret>' -docstring 'next_node'
    map global syntax-tree-next t   ': tree-select-next-node type_declaration<ret>' -docstring 'type_declaration'
    map global syntax-tree-next m   ': tree-select-next-node method_declaration<ret>' -docstring 'method_declaration'
    map global syntax-tree-next f   ': tree-select-next-node function_declaration<ret>' -docstring 'function_declaration'
    map global syntax-tree-next b   ': tree-select-next-node block<ret>' -docstring 'block'
    map global syntax-tree-next i   ': tree-select-next-node if_statement<ret>' -docstring 'if_statement'
    map global syntax-tree-next o   ': tree-select-next-node for_statement<ret>' -docstring 'for_statement'
    map global syntax-tree-next u   ': tree-select-next-node parameter_list<ret>' -docstring 'parameter_list'
    map global syntax-tree-next r   ': tree-select-next-node return_statement<ret>' -docstring 'return_statement'
    map global syntax-tree-next <backspace> ': enter-user-mode syntax-tree<ret>' -docstring 'back...'

    declare-user-mode syntax-tree-prev
    map global syntax-tree-prev '(' ': tree-select-previous-node<ret>' -docstring 'previous_node'
    map global syntax-tree-prev t ': tree-select-previous-node type_declaration<ret>' -docstring 'type_declaration'
    map global syntax-tree-prev m ': tree-select-previous-node method_declaration<ret>' -docstring 'method_declaration'
    map global syntax-tree-prev f ': tree-select-previous-node function_declaration<ret>' -docstring 'function_declaration'
    map global syntax-tree-prev b ': tree-select-previous-node block<ret>' -docstring 'block'
    map global syntax-tree-prev i ': tree-select-previous-node if_statement<ret>' -docstring 'if_statement'
    map global syntax-tree-prev o ': tree-select-previous-node for_statement<ret>' -docstring 'for_statement'
    map global syntax-tree-prev u ': tree-select-previous-node parameter_list<ret>' -docstring 'parameter_list'
    map global syntax-tree-prev r ': tree-select-previous-node return_statement<ret>' -docstring 'return_statement'
    map global syntax-tree-prev <backspace> ': enter-user-mode syntax-tree<ret>' -docstring 'back...'

    declare-user-mode syntax-tree
    map global syntax-tree '(' ': enter-user-mode syntax-tree-prev<ret>' -docstring 'previous_node'
    map global syntax-tree ')' ': enter-user-mode syntax-tree-next<ret>' -docstring 'next_node'
    map global syntax-tree c ': enter-user-mode syntax-tree-children<ret>' -docstring 'children'
    map global syntax-tree p ': enter-user-mode syntax-tree-parent<ret>' -docstring 'parent_node'
    map global syntax-tree t ': tree-node-sexp<ret>' -docstring 'tree-node-sexp'
    map global user t ': enter-user-mode syntax-tree<ret>' -docstring 'tree select'
}

# plug "https://gitlab.com" "fsub/kakoune-mark.git"

source "%val{config}/scripts/colorscheme-browser.kak"
source "%val{config}/scripts/bc.kak"
source "%val{config}/scripts/expand.kak"

## General settings.
# set global ui_options ncurses_assistant=off
set global ui_options ncurses_status_on_top=true ncurses_assistant=off
set global tabstop 4
set global indentwidth 4
# keep space around cursor
set global scrolloff 2,4
set global disabled_hooks .*-trim-indent
# set global grepcmd 'rg --column --with-filename'
# set global grepcmd 'rg --vimgrep'
try %{ set global grepcmd 'ag --filename --column --ignore tags --ignore build --ignore buildDebug' }

colorscheme github-custom

# enable kak-lsp
eval %sh{kak-lsp --kakoune -s $kak_session}
# lsp-enable
# nop %sh{ (kak-lsp -s $kak_session -vvv ) > /tmp/kak-lsp.log 2>&1 < /dev/null & }
# map global user a ': enter-user-mode lsp<ret>' -docstring 'lsp mode'
hook global KakEnd .* lsp-exit

# hook global WinCreate ^[^*]+$ %{
hook global WinCreate .* %{
    addhl window/wrap wrap
    addhl window/number-lines number-lines -hlcursor
    # addhl window/show-whitespaces show-whitespaces -tab '›' -tabpad '⋅' -lf ' ' -spc ' ' -nbsp '⍽'
    addhl window/show-whitespaces show-whitespaces -tab '›' -tabpad '⋅' -spc ' ' -nbsp '⍽'
    addhl window/show-matching show-matching
    addhl window/VisibleWords regex \b(?:FIXME|TODO|XXX)\b 0:default+rb

    # smarttab-enable
    tab-completion-enable
    # show-trailing-whitespace-enable; face window TrailingWhitespace default,red
    search-highlighting-enable; face window Search default,rgb:EDF97D+bi
}

## File types.
def -hidden filetype-hook -params 2 %{ hook global WinSetOption "filetype=(%arg{1})" %arg{2} }

filetype-hook man %{
    rmhl window/number-lines
    set window scrolloff 1000,0
}

declare-user-mode help-and-hovers
# map global help-and-hovers m ': mark-word<ret>' -docstring 'mark word'
# map global help-and-hovers c ': mark-clear<ret>' -docstring 'mark clear'
map global help-and-hovers p ': print-working-directory<ret>' -docstring 'print working dir'
map global user h ': enter-user-mode help-and-hovers<ret>' -docstring 'help and hovers'

#spell
map global help-and-hovers s '_: spell-replace<ret>' -docstring 'spell replace'
declare-option str language en-GB
filetype-hook latex|markdown|git-commit %{
    hook window BufWritePost .* %{
        spell %opt{language}
    }
}

filetype-hook go %{
    lsp-enable-window
    map window user a ': enter-user-mode lsp<ret>' -docstring 'lsp mode'
    unmap window lsp &
    map window lsp <*> ': lsp-highlight-references<ret>' -docstring 'lsp-highlight-references'
    lsp-auto-signature-help-enable
    # set window lsp_auto_highlight_references true

    try %{ set window grepcmd 'rg --column -tgo -g=!vendor' }
    set window matching_pairs '(' ')' '{' '}' '[' ']'
    set window auto_pairs '(' ')' '{' '}' '[' ']' '"' '"' '''' '''' '`' '`'
    set window indentwidth 0
    set window formatcmd goreturns
    hook buffer BufWritePre .*\.go %{ format }
    # hook window BufWritePost .*\.go %{ format }
    # alias window format go-format-use-goimports
    alias window jump-to-definition go-jump
    # set buffer lintcmd '(gometalinter | grep -v "::\w")  <'
    map global goto u '<esc>: go-jump<ret>' -docstring 'go-jump'
    map global help-and-hovers d ': go-doc-info<ret>' -docstring 'go-doc-info'
    # map global help-and-hovers h ': lsp-hover<ret>' -docstring 'lsp-hover'
    # map global help-and-hovers i ': lsp-signature-help<ret>' -docstring 'lsp-signature-help'
    # map global help-and-hovers r ': lsp-highlight-references<ret>' -docstring 'lsp-highlight-references'
    # map global goto d '<esc>: enter-user-mode gotodef<ret>' -docstring 'gotodef mode'
    # go-enable-autocomplete
}

filetype-hook c|cpp %{
    clang-enable-autocomplete; clang-enable-diagnostics
    alias window lint clang-parse
    alias window lint-next-error clang-diagnostics-next
    map window object ';' '/\*,\*/<ret>'
}

filetype-hook rust %{
    set buffer formatcmd rustfmt
}

# filetype-hook markdown %{
#     set window static_words %sh{tr '\n' ':' < /usr/share/dict/words}
# }

filetype-hook json|js %{
    # set buffer formatcmd 'jq .'
    set buffer formatcmd 'js-beautify -a -j -B --good-stuff'
}

# Highlight any files whose names start with "zsh" as sh
hook global BufCreate (.*/)?\.?zsh.* %{
    set-option buffer filetype sh
}

# Highlight files ending in .conf as ini
# (Will probably be close enough)
hook global BufCreate .*\.conf %{
    set-option buffer filetype ini
}

# escape hatch
# https://github.com/mawww/kakoune/wiki/Avoid-the-escape-key
hook global InsertChar \. %{ try %{
    exec -draft hH <a-k>,\.<ret> d
    exec <esc>
    #write
}}

def -hidden text-object-indented-paragraph %{
    eval -save-regs '^' %{
        exec -draft -save-regs '' '<a-i>pZ'
        exec '<a-i>i<a-z>i'
    }
}
try %{ set global expand_commands %{
    expand-impl %{ exec <a-i>b }
    expand-impl %{ exec <a-a>b }
    expand-impl %{ exec <a-i>B }
    expand-impl %{ exec <a-a>B }
    expand-impl %{ exec <a-i>r }
    expand-impl %{ exec <a-a>r }
    expand-impl %{ exec <a-i>i }
    expand-impl %{ exec <a-i>i_ }
    expand-impl %{ text-object-indented-paragraph }
    expand-impl %{ text-object-indented-paragraph; exec _ }
    expand-impl %{ exec <a-x>_ }
}}

## Maps.
alias global u enter-user-mode
map global normal 'q' <space>
map global normal <a-q> <a-space>
# space is my leader
map global normal <space> ','
map global user <space> ':' -docstring 'command prompt'
map global normal ':' '%' -docstring 'select whole buffer'

map global goto ';' '.' -docstring 'last buffer change'
map global goto <plus>  '<esc>: switch-to-modified-buffer<ret>' -docstring 'switch to [+] buffer'

# Save position before %
map global normal <%> '<c-s>%'

map global normal = <a-`> -docstring 'toggle case'

map global normal <'> <">
map global normal <"> <q>

# stop c and d from yanking
# map global normal d <a-d>
# map global normal c <a-c>
# map global normal <a-d> ''
# map global normal <a-c> ''

map global normal <0>   ': zero select-word-better<ret>'
map global normal <a-0> ': select-WORD-better<ret>'
def -hidden -params 1 zero %{
   eval %sh{
        if [ $kak_count = 0 ]; then
            echo "$1"
        else
            echo "exec ${kak_count}0"
        fi
    }
}

def -hidden smart-star -params 1 %{
    try %{
        exec -draft <a-space>
        eval -no-hooks -draft -save-regs '"' %{
            exec -save-regs '' "%arg{1}""""*"
            edit -scratch *smart-star-temp*
            exec '<a-P>)<a-space>i|<esc>'
        }
        try %{ exec -buffer *smart-star-temp* -save-regs '' "%%H""%val{register}/<c-r>.<ret>" }
        db *smart-star-temp*
    } catch %{
        exec -save-regs '' """%val{register}%arg{1}"
    }
}
map global normal * ': smart-star *<ret>'
map global normal <a-*> ': smart-star <lt>a-*><ret>'

# map global normal <x> <a-x>
# map global normal <a-x> <a-X>
# https://github.com/mawww/kakoune/wiki/Selections#how-to-make-x-select-lines-downward-and-x-select-lines-upward
def -params 1 extend-line-down %{
  exec "<a-:>%arg{1}X"
}
def -params 1 extend-line-up %{
  exec "<a-:><a-;>%arg{1}K<a-;>"
  try %{
    exec -draft ';<a-K>\n<ret>'
    exec X
  }
  exec '<a-;><a-X>'
}
map global normal x ': extend-line-down %val{count}<ret>'
map global normal X ': extend-line-up %val{count}<ret>'

# https://github.com/mawww/kakoune/wiki/Selections#how-to-make-word-keys-discern-camelcase-or-snake_case-parts
def -hidden select-prev-word-part %{
  exec <a-/>[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}
def -hidden select-next-word-part %{
  exec /[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}
def -hidden extend-prev-word-part %{
  exec <a-?>[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}
def -hidden extend-next-word-part %{
  exec ?[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}

def enlarge-selection %{
  exec '<a-:>L<a-;>H<a-:>'
}
def shrink-selection %{
  exec '<a-:>H<a-;>L<a-:>'
}

# https://github.com/mawww/kakoune/wiki/Selections#how-to-convert-between-common-case-conventions
# foo_bar → fooBar
# foo-bar → fooBar
# foo bar → fooBar
def camelcase %{
  exec '`s[-_<space>]<ret>d~<a-i>w'
}

# fooBar → foo_bar
# foo-bar → foo_bar
# foo bar → foo_bar
def snakecase %{
  exec '<a-:><a-;>s-|[a-z][A-Z]<ret>\;a<space><esc>s[-\s]+<ret>c_<esc><a-i>w`'
}

# fooBar → foo-bar
# foo_bar → foo-bar
# foo bar → foo-bar
def kebabcase %{
  exec '<a-:><a-;>s_|[a-z][A-Z]<ret>\;a<space><esc>s[_\s]+<ret>c-<esc><a-i>w`'
}

def -hidden slice-by-camel %{
  exec s[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}
# <a-_> merge contiguous selections together (works across lines as well)

declare-user-mode discern
# map global discern <minus> ': shrink-selection;enter-user-mode discern<ret>'  -docstring 'shrink selection'
# map global discern <plus>  ': enlarge-selection;enter-user-mode discern<ret>' -docstring 'enlarge selection'
map global discern w       ': select-next-word-part;enter-user-mode discern<ret>'                     -docstring 'select next word part'
map global discern W       ': extend-next-word-part;enter-user-mode discern<ret>'                     -docstring 'extend next word part'
map global discern b       ': select-prev-word-part;enter-user-mode discern<ret>'                     -docstring 'select prev word part'
map global discern B       ': extend-prev-word-part;enter-user-mode discern<ret>'                     -docstring 'extend prev word part'
# map global discern y       ': <esc>y'                                         -docstring 'yank <esc>'
# map global discern y       '<esc>y'                                         -docstring 'yank <esc>'
# map global normal  <a-space>       ': enter-user-mode discern<ret>'

declare-user-mode anchor
map global anchor <,>     ': slice-by-camel<ret>'    -docstring 'slice by word'
map global anchor <minus> ': shrink-selection<ret>'  -docstring 'shrink selection'
map global anchor <plus>  ': enlarge-selection<ret>' -docstring 'enlarge selection'
map global anchor <space> ': expand<ret>'            -docstring 'smart expand'
map global anchor a       '<a-;>;'                   -docstring 'reduce to anchor'
map global anchor c       ';'                        -docstring 'reduce to cursor'
map global anchor f       '<a-;>'                    -docstring 'flip cursor and anchor'
map global anchor h       '<a-:><a-;>'               -docstring 'ensure anchor after cursor'
map global anchor l       '<a-:>'                    -docstring 'ensure cursor after anchor'
map global anchor s       '<a-S>'                    -docstring 'select cursor and anchor'

map global normal <,> ': enter-user-mode  anchor<ret>'
map global normal <a-,> ': enter-user-mode -lock anchor<ret>'

declare-user-mode echo
map global echo o ':echo %opt{}<left>'        -docstring 'opt'
map global echo O ':echo -debug %opt{}<left>' -docstring 'opt debug'
map global echo r ':echo %reg{}<left>'        -docstring 'reg'
map global echo R ':echo -debug %reg{}<left>' -docstring 'reg debug'
map global echo s ':echo %sh{}<left>'         -docstring 'sh'
map global echo S ':echo -debug %sh{}<left>'  -docstring 'sh debug'
map global echo v ':echo %val{}<left>'        -docstring 'val'
map global echo V ':echo -debug %val{}<left>' -docstring 'val debug'

declare-user-mode search
map global search / ': exec /<ret>\Q\E<left><left>' -docstring 'regex disabled'
map global search i '/(?i)'                         -docstring 'case insensitive'

map global user / ': enter-user-mode search<ret>'    -docstring 'search mode'

# map global normal <ret> :w<ret>
map global normal <F2> ': w<ret>' -docstring 'save'

# https://github.com/mawww/kakoune/issues/1791
map global object q Q -docstring 'double quote string'
map global object Q q -docstring 'single quote string'
map global view u t -docstring 'same as t'
map global view h hv
map global view j jv
map global view k kv
map global view l lv

# vim old habits
map global normal D '<a-l>d' -docstring 'delete to end of line'

map global normal <#>   ': comment-line<ret>' -docstring 'comment line'
map global normal <a-#> ': comment-block<ret>' -docstring 'comment block'

# Insert mode
#map global insert <c-s> <c-o>    ; # silent: stop completion
#map global insert <c-c> <c-x>    ; # complete here
#map global insert <c-k> <c-v>    ; # raw insert, use vim binding
#map global insert <c-c> <a-\;>   ; # execute one normal kak command
#map global insert <c-y> '<c-r>"' ; # paste from normal yank register, readline key
map global insert <c-y> '<a-;>!pbpaste<ret>'

# user maps
map global user S '*%s<ret>' -docstring 'select all'
map global user R ': e!<ret>' -docstring 'Reload buffer'

declare-user-mode clipboard
map global clipboard i ': clipboard-import<ret>' -docstring 'import'
map global clipboard e ': clipboard-export<ret>' -docstring 'export'
map global clipboard y '<a-|>tmux setb -b kak "$kak_selection"<ret>;: echo -markup {Information}selection sent tmux buffer<ret>' -docstring 'to tmux buffer'
map global clipboard Y '<a-l>y' -docstring 'yank to end of line'
# map global clipboard y '<a-|>pbcopy<ret>; :echo "copied selection to system clipboard"<ret>' -docstring 'yank'
# map global clipboard p '!pbpaste<ret>' -docstring 'paste'
# map global user <lt> ': clipboard-import<ret>' -docstring 'sysclipboard import'
# map global user <gt> ': clipboard-export<ret>' -docstring 'sysclipboard export'
map global normal Y ': enter-user-mode clipboard<ret>' -docstring 'clipboard mode'

## Defs.
# https://github.com/alyssais/dotfiles/blob/master/.config/kak/kakrc#L30-L38
define-command -docstring "import from the system clipboard" clipboard-import %{
  set-register dquote %sh{pbpaste}
  echo -markup "{Information}imported system clipboard to "" register"
}

define-command -docstring "export to the system clipboard" clipboard-export %{
  nop %sh{ printf "%s" "$kak_main_reg_dquote" | pbcopy }
  echo -markup "{Information}exported "" register to system clipboard"
}

# Sort of a replacement for gq.
# def format-par %{ exec '|par -w%opt{autowrap_column}<a-!><ret>' }
# def format-text %{ exec '|fmt -w 80<ret>: echo -markup {green}[sel] | fmt -w 80<ret>' }
def format-text %{ exec '|fmt %opt{autowrap_column}<a-!><ret>' }
def format-comment %{ exec '<a-s>ght/F<space>dx<a-_>|fmt<a-!><ret><a-s>Px<a-_>' }

def selection-length %{
    eval %sh{ echo "echo ${#kak_selection}" }
}
# def selection-length %{echo %sh{echo ${#kak_selection} }}

def trim-tw -docstring "trim trailing whitespaces" %{
  try %{
    eval -draft %{
      exec '%s\h+$<ret><a-d>'
      eval -client %val{client} echo -- \
        %sh{ echo -markup "{Information}trimmed trailing whitespace on $(echo "$kak_selections_desc" | wc -w) lines" }
    }
  } catch %{
    echo -markup "{Information}no trailing whitespace"
  }
}

def select-word-better %{
  # Note: \w doesn't use extra_word_chars.
  eval -itersel %{
    try %{ exec '<a-i>w' } catch %{ exec '<a-l>s\w<ret>) <a-i>w' } catch %{}
  }
  exec '<a-k>\w<ret>'
}
def select-WORD-better %{
  eval -itersel %{
    try %{ exec '<a-i><a-w>' } catch %{ exec '<a-l>s\S<ret>) <a-i><a-w>' } catch %{}
  }
  exec '<a-k>\S<ret>'
}

def switch-to-modified-buffer %{
  eval -save-regs a %{
    reg a ''
    try %{
      eval -buffer * %{
        eval %sh{[ "$kak_modified" = true ] && echo "reg a %{$kak_bufname}; fail"}
      }
    }
    eval %sh{[ -z "$kak_main_reg_a" ] && echo "fail 'No modified buffers!'"}
    buffer %reg{a}
  }
}

def -docstring %{switch to the other client's buffer} \
  other-client-buffer \
  %{ eval %sh{
  if [ "$(echo "$kak_client_list" | wc -w)" -ne 2 ]; then
    echo "fail 'only works with two clients'"
    exit
  fi
  set -- $kak_client_list
  other_client="$1"
  [ "$other_client" = "$kak_client" ] && other_client="$2"
  echo "eval -client '$other_client' 'eval -client ''$kak_client'' \"buffer ''%val{bufname}''\"'"
}}

## More:
# Git extras.
def git-show-blamed-commit %{
  git show %sh{git blame -L "$kak_cursor_line,$kak_cursor_line" "$kak_buffile" | awk '{print $1}'}
}
def git-log-lines %{
  git log -L %sh{
    anchor="${kak_selection_desc%,*}"
    anchor_line="${anchor%.*}"
    echo "$anchor_line,$kak_cursor_line:$kak_buffile"
  }
}
def git-toggle-blame %{
  try %{
    addhl window/git-blame group
    rmhl window/git-blame
    git blame
  } catch %{
    git hide-blame
  }
}
def git-hide-diff %{ rmhl window/git-diff }

declare-user-mode git
map global git b  ': git-toggle-blame<ret>'       -docstring 'blame (toggle)'
map global git l  ': git log<ret>'                -docstring 'log'
map global git c  ': git commit<ret>'             -docstring 'commit'
map global git d  ': git diff<ret>'               -docstring 'diff'
map global git s  ': git status<ret>'             -docstring 'status'
map global git h  ': git show-diff<ret>'          -docstring 'show diff'
map global git H  ': git-hide-diff<ret>'          -docstring 'hide diff'
map global git w  ': git-show-blamed-commit<ret>' -docstring 'show blamed commit'
map global git L  ': git-log-lines<ret>'          -docstring 'log blame'
map global user g ': enter-user-mode git<ret>'    -docstring 'git mode'


# smarttab.kak?
# Emulate expandtab smarttab, kind of.
# Due to #2122 this can only be done as a hook, not a map.
def smarttab-enable %{
  hook -group smarttab window InsertChar \t %{ exec -draft -itersel "h%opt{indentwidth}@" }
  hook -group smarttab window InsertDelete ' ' %{
    eval -draft -itersel %{ try %{
      exec 'hGh' "s\A((.{%opt{indentwidth}})*[^ ]*) *\z<ret>" '"1R'
    }}
  }
}
def smarttab-disable %{ rmhooks window smarttab }


# Highlight trailing whitespace in normal mode, with the TrailingWhitespace face.
# What I really want is to only not highlight trailing whitespace as I'm
# inserting it, but that doesn't seem possible right now.
def show-trailing-whitespace-enable %{
  addhl window/TrailingWhitespace regex \h+$ 0:TrailingWhitespaceActive
  face window TrailingWhitespaceActive TrailingWhitespace
  hook -group trailing-whitespace window ModeChange 'normal:insert' \
    %{ face window TrailingWhitespaceActive '' }
  hook -group trailing-whitespace window ModeChange 'insert:normal' \
    %{ face window TrailingWhitespaceActive TrailingWhitespace }
}
def show-trailing-whitespace-disable %{
  rmhl window/TrailingWhitespace
  rmhooks window trailing-whitespace
}
face global TrailingWhitespace ''


# Tab completion.
def tab-completion-enable %{
  hook -group tab-completion window InsertCompletionShow .* %{
    try %{
      exec -draft 'h<a-K>\s<ret>'
      map window insert <tab> <c-n>
      map window insert <s-tab> <c-p>
    }
  }
  hook -group tab-completion window InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
  }
}
def tab-completion-disable %{ rmhooks window tab-completion }

# Basic autoindent.
def -hidden basic-autoindent-on-newline %{
  eval -draft -itersel %{
    try %{ exec -draft ';K<a-&>' }                      # copy indentation from previous line
    try %{ exec -draft ';k<a-x><a-k>^\h+$<ret>H<a-d>' } # remove whitespace from autoindent on previous line
  }
}
def basic-autoindent-enable %{
  hook -group basic-autoindent window InsertChar '\n' basic-autoindent-on-newline
  hook -group basic-autoindent window WinSetOption 'filetype=.*' basic-autoindent-disable
}
def basic-autoindent-disable %{ rmhooks window basic-autoindent }


# search-highlighting.kak, simplified
def search-highlighting-enable %{
  hook window -group search-highlighting NormalKey [/?*nN]|<a-[/?*nN]> %{ try %{
    addhl window/SearchHighlighting dynregex '%reg{/}' 0:Search
  }}
  hook window -group search-highlighting NormalKey <esc> %{ rmhl window/SearchHighlighting }
}
def search-highlighting-disable %{
  rmhl window/SearchHighlighting
  rmhooks window search-highlighting
}

